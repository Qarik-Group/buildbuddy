syntax = "proto3";

import "proto/remote_execution.proto";

package raft;

////////////////////////////////////////////////////////////////////////////////
//
// Raft storage and wire protos, used to represent data written to the raft log.
//
////////////////////////////////////////////////////////////////////////////////

// KV is a basic proto type that represents data written to pebble.
// TODO(tylerw): do we need this?
message KV {
  bytes key = 1;
  bytes value = 2;
}

// Isolation represents the cache isolation type of a particular item.
message Isolation {
  enum CacheType {
    UNKNOWN_TYPE = 0;
    ACTION_CACHE = 1;
    CAS_CACHE = 2;
  }
  CacheType cache_type = 1;
  string remote_instance_name = 2;
}

message FileRecord {
  string group_id = 1;
  Isolation isolation = 2;
  build.bazel.remote.execution.v2.Digest digest = 3;
}

message FileWriteRequest {
  FileRecord file_record = 1;
}

message FileWriteResponse {
}

message DirectWriteRequest {
  KV kv = 1;
}

message DirectWriteResponse {
}

message DirectReadRequest {
  bytes key = 1;
}

message DirectReadResponse {
  KV kv = 1;
}

// Raft CMD API, used to encode raft commands that are replicated via raft and
// written to a log. Everything written via SyncPropose must be a RequestUnion.
message RequestUnion {
  oneof value {
    FileWriteRequest file_write = 1;
    DirectWriteRequest direct_write = 2;
    DirectReadRequest direct_read = 3;
  }
}

// Raft CMD API, used to encode raft commands that are replicated via raft and
// written to a log. Everything passed to SyncRead must be a RequestUnion and
// everything returned will be a ResponseUnion.
message ResponseUnion {
  oneof value {
    FileWriteResponse file_write = 1;
    DirectWriteResponse direct_write = 2;
    DirectReadResponse direct_read = 3;
  }
}

////////////////////////////////////////////////////////////////////////////////
//
// Raft meta-API, used by placement driver to manage data locations etc.
//
////////////////////////////////////////////////////////////////////////////////

message StartClusterRequest {
	uint64 cluster_id = 1;
	uint64 node_id = 2;
	map<uint64, string> initial_member = 3;
}

message StartClusterResponse {}

////////////////////////////////////////////////////////////////////////////////
//
// Data backhaul API, used for shipping the actual bytes around, outside raft.
//
////////////////////////////////////////////////////////////////////////////////

message ReadRequest {
  FileRecord file_record = 1;
  int64 offset = 2;
}

message ReadResponse {
  bytes data = 1;
}

message WriteRequest {
  FileRecord file_record = 1;
  bool finish_write = 2;
  bytes data = 3;
}

message WriteResponse {
  int64 committed_size = 1;
}
